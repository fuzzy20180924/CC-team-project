# -*- coding: utf-8 -*-
"""
Created on Fri Oct 19 17:07:46 2018

Variables needed for QRcode encoding and decoding

@author: MomWithMe
"""
import numpy as np

# logistic map decoder
LOGIMAP = np.array([25, 91, 235, 73, 209, 149, 247, 28,
                   102, 245, 37, 128, 254, 0, 0, 1, 3,
                   15, 59, 181, 209, 150, 246, 32, 112,
                   251, 13, 51, 165, 232, 81, 222, 114,
                   252, 10, 39, 132, 254, 1, 6, 24, 90,
                   233, 80, 220, 120, 254, 2, 11, 42, 142,
                   251, 14, 54, 171, 224, 108, 249, 22, 81,
                   222, 113, 251, 12, 46, 150, 246, 32, 114,
                   252, 10, 38, 131, 254, 0, 3, 13, 52, 166,
                   231, 85, 227, 97, 240, 53, 169, 226, 100,
                   243, 44, 146, 249, 21, 79, 219, 122, 254,
                   1, 6, 26, 94, 238, 62, 187, 197, 177, 216,
                   131, 254, 1, 4, 16, 60, 183, 205, 159, 238,
                   61, 187, 199, 173, 221, 116, 253, 7, 28,
                   100, 243, 44])

# generation code, de-comment to use
#def gen_logimap(size):
#    output = np.zeros(size*size//8+1, dtype=float)
#    output[0] = 0.1  # initial value
#    r = 4  # multiplier
#    for i in range(1, output.shape[0]):
#        output[i] = output[i-1]*(1-output[i-1])*r
#    output = np.floor(output*255)
#    return output

# final decoding matrix used by "QRDecoder.py"
DECODING_MATRIX_32by32 = np.array([[1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0],
                                   [1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0],
                                   [0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
                                   [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                                   [1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1],
                                   [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0],
                                   [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0],
                                   [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1],
                                   [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0],
                                   [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0],
                                   [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0],
                                   [0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0],
                                   [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1],
                                   [0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1],
                                   [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0],
                                   [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0],
                                   [0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0],
                                   [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0],
                                   [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
                                   [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1],
                                   [1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
                                   [1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0],
                                   [1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1],
                                   [1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0],
                                   [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0],
                                   [0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1],
                                   [1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1],
                                   [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                                   [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1],
                                   [0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1],
                                   [1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1],
                                   [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1]],
    dtype=int)

# generation code, un-comment to use
#FORMAT_LOGI = '08b'
#LDMatrix = np.array([[int(x) for x in format(y, FORMAT_LOGI)[::-1]] 
#                    for y in LOGIMAP[:-1]])
#LDMatrix = np.reshape(LDMatrix, (32, -1))

# pattern string for 21 by 21 QR code
STRING21_0 = '11111110.....01111111...........10000010.....01000001...........10111010.....01011101...........10111010.....01011101...........10111010.....01011101...........10000010.....01000001...........11111110.....01111111...........00000000.....00000000...........................................................................................................................................................................00000000........................11111110........................10000010........................10111010........................10111010........................10111010........................10000010........................11111110.............'
STRING21_90 = '11111110........................10000010........................10111010........................10111010........................10111010........................10000010........................11111110........................00000000........................................................................................................................................................................................00000000.....00000000...........11111110.....01111111...........10000010.....01000001...........10111010.....01011101...........10111010.....01011101...........10111010.....01011101...........10000010.....01000001...........11111110.....01111111'
STRING21_180 = '.............01111111........................01000001........................01011101........................01011101........................01011101........................01000001........................01111111........................00000000...........................................................................................................................................................................00000000.....00000000...........11111110.....01111111...........10000010.....01000001...........10111010.....01011101...........10111010.....01011101...........10111010.....01011101...........10000010.....01000001...........11111110.....01111111'
STRING21_270 = '11111110.....01111111...........10000010.....01000001...........10111010.....01011101...........10111010.....01011101...........10111010.....01011101...........10000010.....01000001...........11111110.....01111111...........00000000.....00000000........................................................................................................................................................................................00000000........................01111111........................01000001........................01011101........................01011101........................01011101........................01000001........................01111111'
LIST21 = [STRING21_0, STRING21_90, STRING21_180, STRING21_270]
# generation code
#m21 = np.loadtxt("patterns/21x21_matching.csv", delimiter=",")
#m21[m21 >= 0] = 0.5
#m21[m21 == -1] = 1
#m21[m21 == -2] = 0
#append = 0.5*np.ones((21, 32-21))
#m = np.concatenate((m21, append), axis=1)
#matrix = m.ravel()
#c = np.zeros(matrix.shape, dtype=str)
#c[matrix == 1] = '1'
#c[matrix == 0] = '0'
#c[matrix == 0.5] = '.'
#a = ''.join(c)
#a = a[:-(32-21)]
# generating rotated pattern
#m21 = np.rot90(m21)
#m = np.concatenate((m21, append), axis=1)
#matrix = m.ravel()
#c[matrix == 1] = '1'
#c[matrix == 0] = '0'
#c[matrix == 0.5] = '.'
#a = ''.join(c)
#a = a[:-(32-21)]


# pattern string for 25 by 25 QR code
STRING25_0 = '11111110.........01111111.......10000010.........01000001.......10111010.........01011101.......10111010.........01011101.......10111010.........01011101.......10000010.........01000001.......11111110.........01111111.......00000000.........00000000.......................................................................................................................................................................................................................................................................................11111...........00000000........10001...........11111110........10101...........10000010........10001...........10111010........11111...........10111010........................10111010........................10000010........................11111110.................'
STRING25_90 = '11111110........................10000010........................10111010........................10111010........................10111010........11111...........10000010........10001...........11111110........10101...........00000000........10001...........................11111...........................................................................................................................................................................................................................................................................00000000.........00000000.......11111110.........01111111.......10000010.........01000001.......10111010.........01011101.......10111010.........01011101.......10111010.........01011101.......10000010.........01000001.......11111110.........01111111'
STRING25_180 = '.................01111111........................01000001........................01011101........................01011101...........11111........01011101...........10001........01000001...........10101........01111111...........10001........00000000...........11111.......................................................................................................................................................................................................................................................................................00000000.........00000000.......11111110.........01111111.......10000010.........01000001.......10111010.........01011101.......10111010.........01011101.......10111010.........01011101.......10000010.........01000001.......11111110.........01111111'
STRING25_270 = '11111110.........01111111.......10000010.........01000001.......10111010.........01011101.......10111010.........01011101.......10111010.........01011101.......10000010.........01000001.......11111110.........01111111.......00000000.........00000000...........................................................................................................................................................................................................................................................................11111...........................10001........00000000...........10101........01111111...........10001........01000001...........11111........01011101........................01011101........................01011101........................01000001........................01111111'
LIST25 = [STRING25_0, STRING25_90, STRING25_180, STRING25_270]
# generation code
#m25 = np.loadtxt("patterns/25x25_matching.csv", delimiter=",")
#m25[m25 >= 0] = 0.5
#m25[m25 == -1] = 1
#m25[m25 == -2] = 0
#append = 0.5*np.ones((25, 32-25))
#m = np.concatenate((m25, append), axis=1)
#matrix = m.ravel()
#c = np.zeros(matrix.shape, dtype=str)
#c[matrix == 1] = '1'
#c[matrix == 0] = '0'
#c[matrix == 0.5] = '.'
#a = ''.join(c)
#a = a[:-(32-25)]
# generating rotated patterns
#m25 = np.rot90(m25)
#m = np.concatenate((m25, append), axis=1)
#matrix = m.ravel()
#c = np.zeros(matrix.shape, dtype=str)
#c[matrix == 1] = '1'
#c[matrix == 0] = '0'
#c[matrix == 0.5] = '.'
#a = ''.join(c)
#a = a[:-(32-25)]

# index array used in pattern matching
SELECT21 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660]
SELECT25 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792]

# generation code
#a = list(range(21))
#for i in range(1, 21):
#    a.extend(list(range(i*32, i*32+21)))

# fill in position array
POS21 = [[20, 20], [20, 19], [19, 20], [19, 19], [18, 20], [18, 19], [17, 20], [17, 19], [16, 20], [16, 19], [15, 20], [15, 19], [14, 20], [14, 19], [13, 20], [13, 19], [12, 20], [12, 19], [11, 20], [11, 19], [10, 20], [10, 19], [9, 20], [9, 19], [8, 20], [8, 19], [8, 18], [8, 17], [9, 18], [9, 17], [10, 18], [10, 17], [11, 18], [11, 17], [12, 18], [12, 17], [13, 18], [13, 17], [14, 18], [14, 17], [15, 18], [15, 17], [16, 18], [16, 17], [17, 18], [17, 17], [18, 18], [18, 17], [19, 18], [19, 17], [20, 18], [20, 17], [20, 16], [20, 15], [19, 16], [19, 15], [18, 16], [18, 15], [17, 16], [17, 15], [16, 16], [16, 15], [15, 16], [15, 15], [14, 16], [14, 15], [13, 16], [13, 15], [12, 16], [12, 15], [11, 16], [11, 15], [10, 16], [10, 15], [9, 16], [9, 15], [8, 16], [8, 15], [8, 14], [8, 13], [9, 14], [9, 13], [10, 14], [10, 13], [11, 14], [11, 13], [12, 14], [12, 13], [13, 14], [13, 13], [14, 14], [14, 13], [15, 14], [15, 13], [16, 14], [16, 13], [17, 14], [17, 13], [18, 14], [18, 13], [19, 14], [19, 13], [20, 14], [20, 13], [20, 12], [20, 11], [19, 12], [19, 11], [18, 12], [18, 11], [17, 12], [17, 11], [16, 12], [16, 11], [15, 12], [15, 11], [14, 12], [14, 11], [13, 12], [13, 11], [12, 12], [12, 11], [11, 12], [11, 11], [10, 12], [10, 11], [9, 12], [9, 11], [8, 12], [8, 11], [7, 12], [7, 11], [5, 12], [5, 11], [4, 12], [4, 11], [3, 12], [3, 11], [2, 12], [2, 11], [1, 12], [1, 11], [0, 12], [0, 11], [0, 10], [0, 9], [1, 10], [1, 9], [2, 10], [2, 9], [3, 10], [3, 9], [4, 10], [4, 9], [5, 10], [5, 9], [7, 10], [7, 9], [8, 10], [8, 9], [9, 10], [9, 9], [10, 10], [10, 9], [11, 10], [11, 9], [12, 10], [12, 9], [13, 10], [13, 9], [14, 10], [14, 9], [15, 10], [15, 9], [16, 10], [16, 9], [17, 10], [17, 9], [18, 10], [18, 9], [19, 10], [19, 9], [20, 10], [20, 9], [12, 8], [12, 7], [11, 8], [11, 7], [10, 8], [10, 7], [9, 8], [9, 7], [8, 8], [8, 7], [8, 5], [8, 4], [9, 5], [9, 4], [10, 5], [10, 4], [11, 5], [11, 4], [12, 5], [12, 4], [12, 3], [12, 2], [11, 3], [11, 2], [10, 3], [10, 2], [9, 3], [9, 2], [8, 3], [8, 2], [8, 1], [8, 0], [9, 1], [9, 0], [10, 1], [10, 0], [11, 1], [11, 0], [12, 1], [12, 0]]
POS25 = [[24, 24], [24, 23], [23, 24], [23, 23], [22, 24], [22, 23], [21, 24], [21, 23], [20, 24], [20, 23], [19, 24], [19, 23], [18, 24], [18, 23], [17, 24], [17, 23], [16, 24], [16, 23], [15, 24], [15, 23], [14, 24], [14, 23], [13, 24], [13, 23], [12, 24], [12, 23], [11, 24], [11, 23], [10, 24], [10, 23], [9, 24], [9, 23], [8, 24], [8, 23], [8, 22], [8, 21], [9, 22], [9, 21], [10, 22], [10, 21], [11, 22], [11, 21], [12, 22], [12, 21], [13, 22], [13, 21], [14, 22], [14, 21], [15, 22], [15, 21], [16, 22], [16, 21], [17, 22], [17, 21], [18, 22], [18, 21], [19, 22], [19, 21], [20, 22], [20, 21], [21, 22], [21, 21], [22, 22], [22, 21], [23, 22], [23, 21], [24, 22], [24, 21], [24, 20], [24, 19], [23, 20], [23, 19], [22, 20], [22, 19], [21, 20], [21, 19], [15, 20], [15, 19], [14, 20], [14, 19], [13, 20], [13, 19], [12, 20], [12, 19], [11, 20], [11, 19], [10, 20], [10, 19], [9, 20], [9, 19], [8, 20], [8, 19], [8, 18], [8, 17], [9, 18], [9, 17], [10, 18], [10, 17], [11, 18], [11, 17], [12, 18], [12, 17], [13, 18], [13, 17], [14, 18], [14, 17], [15, 18], [15, 17], [21, 18], [21, 17], [22, 18], [22, 17], [23, 18], [23, 17], [24, 18], [24, 17], [24, 16], [24, 15], [23, 16], [23, 15], [22, 16], [22, 15], [21, 16], [21, 15], [15, 16], [15, 15], [14, 16], [14, 15], [13, 16], [13, 15], [12, 16], [12, 15], [11, 16], [11, 15], [10, 16], [10, 15], [9, 16], [9, 15], [8, 16], [8, 15], [7, 16], [7, 15], [5, 16], [5, 15], [4, 16], [4, 15], [3, 16], [3, 15], [2, 16], [2, 15], [1, 16], [1, 15], [0, 16], [0, 15], [0, 14], [0, 13], [1, 14], [1, 13], [2, 14], [2, 13], [3, 14], [3, 13], [4, 14], [4, 13], [5, 14], [5, 13], [7, 14], [7, 13], [8, 14], [8, 13], [9, 14], [9, 13], [10, 14], [10, 13], [11, 14], [11, 13], [12, 14], [12, 13], [13, 14], [13, 13], [14, 14], [14, 13], [15, 14], [15, 13], [16, 14], [16, 13], [17, 14], [17, 13], [18, 14], [18, 13], [19, 14], [19, 13], [20, 14], [20, 13], [21, 14], [21, 13], [22, 14], [22, 13], [23, 14], [23, 13], [24, 14], [24, 13], [24, 12], [24, 11], [23, 12], [23, 11], [22, 12], [22, 11], [21, 12], [21, 11], [20, 12], [20, 11], [19, 12], [19, 11], [18, 12], [18, 11], [17, 12], [17, 11], [16, 12], [16, 11], [15, 12], [15, 11], [14, 12], [14, 11], [13, 12], [13, 11], [12, 12], [12, 11], [11, 12], [11, 11], [10, 12], [10, 11], [9, 12], [9, 11], [8, 12], [8, 11], [7, 12], [7, 11], [5, 12], [5, 11], [4, 12], [4, 11], [3, 12], [3, 11], [2, 12], [2, 11], [1, 12], [1, 11], [0, 12], [0, 11], [0, 10], [0, 9], [1, 10], [1, 9], [2, 10], [2, 9], [3, 10], [3, 9], [4, 10], [4, 9], [5, 10], [5, 9], [7, 10], [7, 9], [8, 10], [8, 9], [9, 10], [9, 9], [10, 10], [10, 9], [11, 10], [11, 9], [12, 10], [12, 9], [13, 10], [13, 9], [14, 10], [14, 9], [15, 10], [15, 9], [16, 10], [16, 9], [17, 10], [17, 9], [18, 10], [18, 9], [19, 10], [19, 9], [20, 10], [20, 9], [21, 10], [21, 9], [22, 10], [22, 9], [23, 10], [23, 9], [24, 10], [24, 9], [16, 8], [16, 7], [15, 8], [15, 7], [14, 8], [14, 7], [13, 8], [13, 7], [12, 8], [12, 7], [11, 8], [11, 7], [10, 8], [10, 7], [9, 8], [9, 7], [8, 8], [8, 7], [8, 5], [8, 4], [9, 5], [9, 4], [10, 5], [10, 4], [11, 5], [11, 4], [12, 5], [12, 4], [13, 5], [13, 4], [14, 5], [14, 4], [15, 5], [15, 4], [16, 5], [16, 4], [16, 3], [16, 2], [15, 3], [15, 2], [14, 3], [14, 2], [13, 3], [13, 2], [12, 3], [12, 2], [11, 3], [11, 2], [10, 3], [10, 2], [9, 3], [9, 2], [8, 3], [8, 2], [8, 1], [8, 0], [9, 1], [9, 0], [10, 1], [10, 0], [11, 1], [11, 0], [12, 1], [12, 0], [13, 1], [13, 0], [14, 1], [14, 0], [15, 1], [15, 0], [16, 1], [16, 0]]